// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//edition = "2023";

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/booking/booking-rpc.proto

package booking_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookingRPC_FindMiniUser_FullMethodName                 = "/borpc.BookingRPC/FindMiniUser"
	BookingRPC_FindMiniUserList_FullMethodName             = "/borpc.BookingRPC/FindMiniUserList"
	BookingRPC_FindMiniUserListByOpenIDList_FullMethodName = "/borpc.BookingRPC/FindMiniUserListByOpenIDList"
	BookingRPC_SendMiniMsg_FullMethodName                  = "/borpc.BookingRPC/SendMiniMsg"
	BookingRPC_QueryIndicatorCount_FullMethodName          = "/borpc.BookingRPC/QueryIndicatorCount"
	BookingRPC_QueryIndicatorDetail_FullMethodName         = "/borpc.BookingRPC/QueryIndicatorDetail"
	BookingRPC_CalculateUserIndicator_FullMethodName       = "/borpc.BookingRPC/CalculateUserIndicator"
	BookingRPC_GetGiftList_FullMethodName                  = "/borpc.BookingRPC/GetGiftList"
	BookingRPC_QueryIndicatorCountInBatch_FullMethodName   = "/borpc.BookingRPC/QueryIndicatorCountInBatch"
)

// BookingRPCClient is the client API for BookingRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type BookingRPCClient interface {
	FindMiniUser(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindMiniUserList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindMiniUserListByOpenIDList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SendMiniMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryIndicatorCount(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryIndicatorDetail(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	CalculateUserIndicator(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetGiftList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryIndicatorCountInBatch(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
}

type bookingRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingRPCClient(cc grpc.ClientConnInterface) BookingRPCClient {
	return &bookingRPCClient{cc}
}

func (c *bookingRPCClient) FindMiniUser(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BookingRPC_FindMiniUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) FindMiniUserList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BookingRPC_FindMiniUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) FindMiniUserListByOpenIDList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BookingRPC_FindMiniUserListByOpenIDList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) SendMiniMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BookingRPC_SendMiniMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) QueryIndicatorCount(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BookingRPC_QueryIndicatorCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) QueryIndicatorDetail(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BookingRPC_QueryIndicatorDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) CalculateUserIndicator(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BookingRPC_CalculateUserIndicator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) GetGiftList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BookingRPC_GetGiftList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingRPCClient) QueryIndicatorCountInBatch(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BookingRPC_QueryIndicatorCountInBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingRPCServer is the server API for BookingRPC service.
// All implementations must embed UnimplementedBookingRPCServer
// for forward compatibility.
//
// Interface exported by the server.
type BookingRPCServer interface {
	FindMiniUser(context.Context, *RequestAO) (*ResponseVO, error)
	FindMiniUserList(context.Context, *RequestAO) (*ResponseVO, error)
	FindMiniUserListByOpenIDList(context.Context, *RequestAO) (*ResponseVO, error)
	SendMiniMsg(context.Context, *RequestAO) (*ResponseVO, error)
	QueryIndicatorCount(context.Context, *RequestAO) (*ResponseVO, error)
	QueryIndicatorDetail(context.Context, *RequestAO) (*ResponseVO, error)
	CalculateUserIndicator(context.Context, *RequestAO) (*ResponseVO, error)
	GetGiftList(context.Context, *RequestAO) (*ResponseVO, error)
	QueryIndicatorCountInBatch(context.Context, *RequestAO) (*ResponseVO, error)
	mustEmbedUnimplementedBookingRPCServer()
}

// UnimplementedBookingRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookingRPCServer struct{}

func (UnimplementedBookingRPCServer) FindMiniUser(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMiniUser not implemented")
}
func (UnimplementedBookingRPCServer) FindMiniUserList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMiniUserList not implemented")
}
func (UnimplementedBookingRPCServer) FindMiniUserListByOpenIDList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMiniUserListByOpenIDList not implemented")
}
func (UnimplementedBookingRPCServer) SendMiniMsg(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMiniMsg not implemented")
}
func (UnimplementedBookingRPCServer) QueryIndicatorCount(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndicatorCount not implemented")
}
func (UnimplementedBookingRPCServer) QueryIndicatorDetail(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndicatorDetail not implemented")
}
func (UnimplementedBookingRPCServer) CalculateUserIndicator(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateUserIndicator not implemented")
}
func (UnimplementedBookingRPCServer) GetGiftList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGiftList not implemented")
}
func (UnimplementedBookingRPCServer) QueryIndicatorCountInBatch(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndicatorCountInBatch not implemented")
}
func (UnimplementedBookingRPCServer) mustEmbedUnimplementedBookingRPCServer() {}
func (UnimplementedBookingRPCServer) testEmbeddedByValue()                    {}

// UnsafeBookingRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingRPCServer will
// result in compilation errors.
type UnsafeBookingRPCServer interface {
	mustEmbedUnimplementedBookingRPCServer()
}

func RegisterBookingRPCServer(s grpc.ServiceRegistrar, srv BookingRPCServer) {
	// If the following call pancis, it indicates UnimplementedBookingRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookingRPC_ServiceDesc, srv)
}

func _BookingRPC_FindMiniUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).FindMiniUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingRPC_FindMiniUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).FindMiniUser(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_FindMiniUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).FindMiniUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingRPC_FindMiniUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).FindMiniUserList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_FindMiniUserListByOpenIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).FindMiniUserListByOpenIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingRPC_FindMiniUserListByOpenIDList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).FindMiniUserListByOpenIDList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_SendMiniMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).SendMiniMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingRPC_SendMiniMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).SendMiniMsg(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_QueryIndicatorCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).QueryIndicatorCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingRPC_QueryIndicatorCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).QueryIndicatorCount(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_QueryIndicatorDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).QueryIndicatorDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingRPC_QueryIndicatorDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).QueryIndicatorDetail(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_CalculateUserIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).CalculateUserIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingRPC_CalculateUserIndicator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).CalculateUserIndicator(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_GetGiftList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).GetGiftList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingRPC_GetGiftList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).GetGiftList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingRPC_QueryIndicatorCountInBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingRPCServer).QueryIndicatorCountInBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingRPC_QueryIndicatorCountInBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingRPCServer).QueryIndicatorCountInBatch(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingRPC_ServiceDesc is the grpc.ServiceDesc for BookingRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "borpc.BookingRPC",
	HandlerType: (*BookingRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMiniUser",
			Handler:    _BookingRPC_FindMiniUser_Handler,
		},
		{
			MethodName: "FindMiniUserList",
			Handler:    _BookingRPC_FindMiniUserList_Handler,
		},
		{
			MethodName: "FindMiniUserListByOpenIDList",
			Handler:    _BookingRPC_FindMiniUserListByOpenIDList_Handler,
		},
		{
			MethodName: "SendMiniMsg",
			Handler:    _BookingRPC_SendMiniMsg_Handler,
		},
		{
			MethodName: "QueryIndicatorCount",
			Handler:    _BookingRPC_QueryIndicatorCount_Handler,
		},
		{
			MethodName: "QueryIndicatorDetail",
			Handler:    _BookingRPC_QueryIndicatorDetail_Handler,
		},
		{
			MethodName: "CalculateUserIndicator",
			Handler:    _BookingRPC_CalculateUserIndicator_Handler,
		},
		{
			MethodName: "GetGiftList",
			Handler:    _BookingRPC_GetGiftList_Handler,
		},
		{
			MethodName: "QueryIndicatorCountInBatch",
			Handler:    _BookingRPC_QueryIndicatorCountInBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/booking/booking-rpc.proto",
}
