// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//edition = "2023";

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/business/business-rpc.proto

package business_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BusinessRPC_GenerateOrder_FullMethodName        = "/brpc.BusinessRPC/GenerateOrder"
	BusinessRPC_FindOrderInfo_FullMethodName        = "/brpc.BusinessRPC/FindOrderInfo"
	BusinessRPC_FindProcInstByChatID_FullMethodName = "/brpc.BusinessRPC/FindProcInstByChatID"
	BusinessRPC_UpdateTrack_FullMethodName          = "/brpc.BusinessRPC/UpdateTrack"
	BusinessRPC_FindContentNoList_FullMethodName    = "/brpc.BusinessRPC/FindContentNoList"
	BusinessRPC_UpdateNotifyMode_FullMethodName     = "/brpc.BusinessRPC/UpdateNotifyMode"
	BusinessRPC_UpdateCustomerRemark_FullMethodName = "/brpc.BusinessRPC/UpdateCustomerRemark"
	BusinessRPC_UpdateMiniAndAccount_FullMethodName = "/brpc.BusinessRPC/UpdateMiniAndAccount"
	BusinessRPC_QueryIndicatorCount_FullMethodName  = "/brpc.BusinessRPC/QueryIndicatorCount"
	BusinessRPC_QueryIndicatorDetail_FullMethodName = "/brpc.BusinessRPC/QueryIndicatorDetail"
)

// BusinessRPCClient is the client API for BusinessRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type BusinessRPCClient interface {
	GenerateOrder(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindOrderInfo(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindProcInstByChatID(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	UpdateTrack(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindContentNoList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	UpdateNotifyMode(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	UpdateCustomerRemark(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	UpdateMiniAndAccount(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryIndicatorCount(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryIndicatorDetail(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
}

type businessRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessRPCClient(cc grpc.ClientConnInterface) BusinessRPCClient {
	return &businessRPCClient{cc}
}

func (c *businessRPCClient) GenerateOrder(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_GenerateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRPCClient) FindOrderInfo(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_FindOrderInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRPCClient) FindProcInstByChatID(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_FindProcInstByChatID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRPCClient) UpdateTrack(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_UpdateTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRPCClient) FindContentNoList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_FindContentNoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRPCClient) UpdateNotifyMode(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_UpdateNotifyMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRPCClient) UpdateCustomerRemark(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_UpdateCustomerRemark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRPCClient) UpdateMiniAndAccount(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_UpdateMiniAndAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRPCClient) QueryIndicatorCount(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_QueryIndicatorCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessRPCClient) QueryIndicatorDetail(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, BusinessRPC_QueryIndicatorDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessRPCServer is the server API for BusinessRPC service.
// All implementations must embed UnimplementedBusinessRPCServer
// for forward compatibility.
//
// Interface exported by the server.
type BusinessRPCServer interface {
	GenerateOrder(context.Context, *RequestAO) (*ResponseVO, error)
	FindOrderInfo(context.Context, *RequestAO) (*ResponseVO, error)
	FindProcInstByChatID(context.Context, *RequestAO) (*ResponseVO, error)
	UpdateTrack(context.Context, *RequestAO) (*ResponseVO, error)
	FindContentNoList(context.Context, *RequestAO) (*ResponseVO, error)
	UpdateNotifyMode(context.Context, *RequestAO) (*ResponseVO, error)
	UpdateCustomerRemark(context.Context, *RequestAO) (*ResponseVO, error)
	UpdateMiniAndAccount(context.Context, *RequestAO) (*ResponseVO, error)
	QueryIndicatorCount(context.Context, *RequestAO) (*ResponseVO, error)
	QueryIndicatorDetail(context.Context, *RequestAO) (*ResponseVO, error)
	mustEmbedUnimplementedBusinessRPCServer()
}

// UnimplementedBusinessRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusinessRPCServer struct{}

func (UnimplementedBusinessRPCServer) GenerateOrder(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOrder not implemented")
}
func (UnimplementedBusinessRPCServer) FindOrderInfo(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrderInfo not implemented")
}
func (UnimplementedBusinessRPCServer) FindProcInstByChatID(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProcInstByChatID not implemented")
}
func (UnimplementedBusinessRPCServer) UpdateTrack(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrack not implemented")
}
func (UnimplementedBusinessRPCServer) FindContentNoList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindContentNoList not implemented")
}
func (UnimplementedBusinessRPCServer) UpdateNotifyMode(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifyMode not implemented")
}
func (UnimplementedBusinessRPCServer) UpdateCustomerRemark(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerRemark not implemented")
}
func (UnimplementedBusinessRPCServer) UpdateMiniAndAccount(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMiniAndAccount not implemented")
}
func (UnimplementedBusinessRPCServer) QueryIndicatorCount(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndicatorCount not implemented")
}
func (UnimplementedBusinessRPCServer) QueryIndicatorDetail(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndicatorDetail not implemented")
}
func (UnimplementedBusinessRPCServer) mustEmbedUnimplementedBusinessRPCServer() {}
func (UnimplementedBusinessRPCServer) testEmbeddedByValue()                     {}

// UnsafeBusinessRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessRPCServer will
// result in compilation errors.
type UnsafeBusinessRPCServer interface {
	mustEmbedUnimplementedBusinessRPCServer()
}

func RegisterBusinessRPCServer(s grpc.ServiceRegistrar, srv BusinessRPCServer) {
	// If the following call pancis, it indicates UnimplementedBusinessRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BusinessRPC_ServiceDesc, srv)
}

func _BusinessRPC_GenerateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).GenerateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_GenerateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).GenerateOrder(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRPC_FindOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).FindOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_FindOrderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).FindOrderInfo(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRPC_FindProcInstByChatID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).FindProcInstByChatID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_FindProcInstByChatID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).FindProcInstByChatID(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRPC_UpdateTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).UpdateTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_UpdateTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).UpdateTrack(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRPC_FindContentNoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).FindContentNoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_FindContentNoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).FindContentNoList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRPC_UpdateNotifyMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).UpdateNotifyMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_UpdateNotifyMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).UpdateNotifyMode(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRPC_UpdateCustomerRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).UpdateCustomerRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_UpdateCustomerRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).UpdateCustomerRemark(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRPC_UpdateMiniAndAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).UpdateMiniAndAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_UpdateMiniAndAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).UpdateMiniAndAccount(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRPC_QueryIndicatorCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).QueryIndicatorCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_QueryIndicatorCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).QueryIndicatorCount(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessRPC_QueryIndicatorDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessRPCServer).QueryIndicatorDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessRPC_QueryIndicatorDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessRPCServer).QueryIndicatorDetail(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessRPC_ServiceDesc is the grpc.ServiceDesc for BusinessRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brpc.BusinessRPC",
	HandlerType: (*BusinessRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateOrder",
			Handler:    _BusinessRPC_GenerateOrder_Handler,
		},
		{
			MethodName: "FindOrderInfo",
			Handler:    _BusinessRPC_FindOrderInfo_Handler,
		},
		{
			MethodName: "FindProcInstByChatID",
			Handler:    _BusinessRPC_FindProcInstByChatID_Handler,
		},
		{
			MethodName: "UpdateTrack",
			Handler:    _BusinessRPC_UpdateTrack_Handler,
		},
		{
			MethodName: "FindContentNoList",
			Handler:    _BusinessRPC_FindContentNoList_Handler,
		},
		{
			MethodName: "UpdateNotifyMode",
			Handler:    _BusinessRPC_UpdateNotifyMode_Handler,
		},
		{
			MethodName: "UpdateCustomerRemark",
			Handler:    _BusinessRPC_UpdateCustomerRemark_Handler,
		},
		{
			MethodName: "UpdateMiniAndAccount",
			Handler:    _BusinessRPC_UpdateMiniAndAccount_Handler,
		},
		{
			MethodName: "QueryIndicatorCount",
			Handler:    _BusinessRPC_QueryIndicatorCount_Handler,
		},
		{
			MethodName: "QueryIndicatorDetail",
			Handler:    _BusinessRPC_QueryIndicatorDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/business/business-rpc.proto",
}
