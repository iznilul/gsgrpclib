// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//edition = "2023";

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/wecom/wecom-rpc.proto

package wecom_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WecomRPC_GetUserList_FullMethodName                     = "/wrpc.WecomRPC/GetUserList"
	WecomRPC_GetUserInfo_FullMethodName                     = "/wrpc.WecomRPC/GetUserInfo"
	WecomRPC_SaveUserDetail_FullMethodName                  = "/wrpc.WecomRPC/SaveUserDetail"
	WecomRPC_GetUserDetailByUserID_FullMethodName           = "/wrpc.WecomRPC/GetUserDetailByUserID"
	WecomRPC_GetUserDetailList_FullMethodName               = "/wrpc.WecomRPC/GetUserDetailList"
	WecomRPC_GetRoleList_FullMethodName                     = "/wrpc.WecomRPC/GetRoleList"
	WecomRPC_GetRoleByUserID_FullMethodName                 = "/wrpc.WecomRPC/GetRoleByUserID"
	WecomRPC_GetUserByRoleName_FullMethodName               = "/wrpc.WecomRPC/GetUserByRoleName"
	WecomRPC_FindCustomerList_FullMethodName                = "/wrpc.WecomRPC/FindCustomerList"
	WecomRPC_FindCustomerGroupList_FullMethodName           = "/wrpc.WecomRPC/FindCustomerGroupList"
	WecomRPC_FindCustomerCouldBeSelectedList_FullMethodName = "/wrpc.WecomRPC/FindCustomerCouldBeSelectedList"
	WecomRPC_AddCustomer_FullMethodName                     = "/wrpc.WecomRPC/AddCustomer"
	WecomRPC_UpdateCustomerRemark_FullMethodName            = "/wrpc.WecomRPC/UpdateCustomerRemark"
	WecomRPC_GetCustomerInRobotChat_FullMethodName          = "/wrpc.WecomRPC/GetCustomerInRobotChat"
	WecomRPC_GetCustomerGroup_FullMethodName                = "/wrpc.WecomRPC/GetCustomerGroup"
	WecomRPC_GetCustomerGroupList_FullMethodName            = "/wrpc.WecomRPC/GetCustomerGroupList"
	WecomRPC_GetCustomerGroupChat_FullMethodName            = "/wrpc.WecomRPC/GetCustomerGroupChat"
	WecomRPC_GetCustomerGroupChatByChatID_FullMethodName    = "/wrpc.WecomRPC/GetCustomerGroupChatByChatID"
	WecomRPC_FlushCustomer_FullMethodName                   = "/wrpc.WecomRPC/FlushCustomer"
	WecomRPC_SyncCustomerGroup_FullMethodName               = "/wrpc.WecomRPC/SyncCustomerGroup"
	WecomRPC_FlushCustomerGroup_FullMethodName              = "/wrpc.WecomRPC/FlushCustomerGroup"
	WecomRPC_QueryCustomerGroupByCond_FullMethodName        = "/wrpc.WecomRPC/QueryCustomerGroupByCond"
	WecomRPC_SendTextMsg_FullMethodName                     = "/wrpc.WecomRPC/SendTextMsg"
	WecomRPC_SendWarnMsg_FullMethodName                     = "/wrpc.WecomRPC/SendWarnMsg"
	WecomRPC_FindAccountUserList_FullMethodName             = "/wrpc.WecomRPC/FindAccountUserList"
	WecomRPC_SyncAccountUser_FullMethodName                 = "/wrpc.WecomRPC/SyncAccountUser"
	WecomRPC_FlushAccountUser_FullMethodName                = "/wrpc.WecomRPC/FlushAccountUser"
	WecomRPC_GetAccountUserList_FullMethodName              = "/wrpc.WecomRPC/GetAccountUserList"
	WecomRPC_GetAccountUserListByOpenIDList_FullMethodName  = "/wrpc.WecomRPC/GetAccountUserListByOpenIDList"
	WecomRPC_ModifyAccountUserRemark_FullMethodName         = "/wrpc.WecomRPC/ModifyAccountUserRemark"
	WecomRPC_GetAccountTagList_FullMethodName               = "/wrpc.WecomRPC/GetAccountTagList"
	WecomRPC_GetOauthCallBackURL_FullMethodName             = "/wrpc.WecomRPC/GetOauthCallBackURL"
	WecomRPC_SyncContactWayList_FullMethodName              = "/wrpc.WecomRPC/SyncContactWayList"
	WecomRPC_FlushContactWay_FullMethodName                 = "/wrpc.WecomRPC/FlushContactWay"
	WecomRPC_SendAccountTrackMsg_FullMethodName             = "/wrpc.WecomRPC/SendAccountTrackMsg"
	WecomRPC_SendAccountProcMsg_FullMethodName              = "/wrpc.WecomRPC/SendAccountProcMsg"
	WecomRPC_QueryFieldList_FullMethodName                  = "/wrpc.WecomRPC/QueryFieldList"
	WecomRPC_FindSupplierList_FullMethodName                = "/wrpc.WecomRPC/FindSupplierList"
	WecomRPC_SyncSupplier_FullMethodName                    = "/wrpc.WecomRPC/SyncSupplier"
	WecomRPC_FindBusinessCustomerList_FullMethodName        = "/wrpc.WecomRPC/FindBusinessCustomerList"
	WecomRPC_SyncBusinessCustomer_FullMethodName            = "/wrpc.WecomRPC/SyncBusinessCustomer"
	WecomRPC_UpdateBusinessCustomer_FullMethodName          = "/wrpc.WecomRPC/UpdateBusinessCustomer"
	WecomRPC_FindEnumList_FullMethodName                    = "/wrpc.WecomRPC/FindEnumList"
	WecomRPC_QueryNameByType_FullMethodName                 = "/wrpc.WecomRPC/QueryNameByType"
	WecomRPC_GetBusinessCustomer_FullMethodName             = "/wrpc.WecomRPC/GetBusinessCustomer"
	WecomRPC_GetNeedNotifyCustomerList_FullMethodName       = "/wrpc.WecomRPC/GetNeedNotifyCustomerList"
	WecomRPC_FindClaimedCustomer_FullMethodName             = "/wrpc.WecomRPC/FindClaimedCustomer"
	WecomRPC_SaveCustomerPointRecord_FullMethodName         = "/wrpc.WecomRPC/SaveCustomerPointRecord"
	WecomRPC_GetCustomerPointRecord_FullMethodName          = "/wrpc.WecomRPC/GetCustomerPointRecord"
	WecomRPC_ListCustomerPointRecord_FullMethodName         = "/wrpc.WecomRPC/ListCustomerPointRecord"
	WecomRPC_ListUserByCond_FullMethodName                  = "/wrpc.WecomRPC/ListUserByCond"
	WecomRPC_JudgeTodayIsWorkday_FullMethodName             = "/wrpc.WecomRPC/JudgeTodayIsWorkday"
	WecomRPC_QueryIndicatorCount_FullMethodName             = "/wrpc.WecomRPC/QueryIndicatorCount"
	WecomRPC_QueryIndicatorDetail_FullMethodName            = "/wrpc.WecomRPC/QueryIndicatorDetail"
	WecomRPC_QueryHalfDayLeaveMap_FullMethodName            = "/wrpc.WecomRPC/QueryHalfDayLeaveMap"
	WecomRPC_QueryCheckInMonth_FullMethodName               = "/wrpc.WecomRPC/QueryCheckInMonth"
	WecomRPC_CalculateUserIndicator_FullMethodName          = "/wrpc.WecomRPC/CalculateUserIndicator"
	WecomRPC_GenerateReportRecord_FullMethodName            = "/wrpc.WecomRPC/GenerateReportRecord"
	WecomRPC_SyncAcademy_FullMethodName                     = "/wrpc.WecomRPC/SyncAcademy"
	WecomRPC_SyncTraining_FullMethodName                    = "/wrpc.WecomRPC/SyncTraining"
	WecomRPC_SyncCourse_FullMethodName                      = "/wrpc.WecomRPC/SyncCourse"
	WecomRPC_QueryIndicatorCountInBatch_FullMethodName      = "/wrpc.WecomRPC/QueryIndicatorCountInBatch"
	WecomRPC_QuerySupplierBySpNoList_FullMethodName         = "/wrpc.WecomRPC/QuerySupplierBySpNoList"
	WecomRPC_SyncInternshipPlan_FullMethodName              = "/wrpc.WecomRPC/SyncInternshipPlan"
)

// WecomRPCClient is the client API for WecomRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type WecomRPCClient interface {
	GetUserList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetUserInfo(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SaveUserDetail(ctx context.Context, in *UserDetailAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetUserDetailByUserID(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetUserDetailList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetRoleList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetRoleByUserID(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetUserByRoleName(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindCustomerList(ctx context.Context, in *FindCustomerAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindCustomerGroupList(ctx context.Context, in *FindCustomerGroupAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindCustomerCouldBeSelectedList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	AddCustomer(ctx context.Context, in *AddCustomerAO, opts ...grpc.CallOption) (*ResponseVO, error)
	UpdateCustomerRemark(ctx context.Context, in *UpdateCustomerAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetCustomerInRobotChat(ctx context.Context, in *GetCustomerInRobotChatAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetCustomerGroup(ctx context.Context, in *GetCustomerGroupAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetCustomerGroupList(ctx context.Context, in *GetCustomerGroupAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetCustomerGroupChat(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetCustomerGroupChatByChatID(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FlushCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SyncCustomerGroup(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FlushCustomerGroup(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryCustomerGroupByCond(ctx context.Context, in *OptionAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SendTextMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SendWarnMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindAccountUserList(ctx context.Context, in *FindAccountAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SyncAccountUser(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FlushAccountUser(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetAccountUserList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetAccountUserListByOpenIDList(ctx context.Context, in *OpenIDListAO, opts ...grpc.CallOption) (*ResponseVO, error)
	ModifyAccountUserRemark(ctx context.Context, in *ModifyRemarkAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetAccountTagList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetOauthCallBackURL(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SyncContactWayList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FlushContactWay(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SendAccountTrackMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SendAccountProcMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryFieldList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindSupplierList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SyncSupplier(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindBusinessCustomerList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SyncBusinessCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	UpdateBusinessCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindEnumList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryNameByType(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetBusinessCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetNeedNotifyCustomerList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	FindClaimedCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SaveCustomerPointRecord(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GetCustomerPointRecord(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	ListCustomerPointRecord(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	ListUserByCond(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	JudgeTodayIsWorkday(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryIndicatorCount(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryIndicatorDetail(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryHalfDayLeaveMap(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryCheckInMonth(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	CalculateUserIndicator(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	GenerateReportRecord(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SyncAcademy(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SyncTraining(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SyncCourse(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QueryIndicatorCountInBatch(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	QuerySupplierBySpNoList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
	SyncInternshipPlan(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error)
}

type wecomRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWecomRPCClient(cc grpc.ClientConnInterface) WecomRPCClient {
	return &wecomRPCClient{cc}
}

func (c *wecomRPCClient) GetUserList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetUserInfo(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SaveUserDetail(ctx context.Context, in *UserDetailAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SaveUserDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetUserDetailByUserID(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetUserDetailByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetUserDetailList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetUserDetailList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetRoleList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetRoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetRoleByUserID(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetRoleByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetUserByRoleName(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetUserByRoleName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FindCustomerList(ctx context.Context, in *FindCustomerAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FindCustomerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FindCustomerGroupList(ctx context.Context, in *FindCustomerGroupAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FindCustomerGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FindCustomerCouldBeSelectedList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FindCustomerCouldBeSelectedList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) AddCustomer(ctx context.Context, in *AddCustomerAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_AddCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) UpdateCustomerRemark(ctx context.Context, in *UpdateCustomerAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_UpdateCustomerRemark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetCustomerInRobotChat(ctx context.Context, in *GetCustomerInRobotChatAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetCustomerInRobotChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetCustomerGroup(ctx context.Context, in *GetCustomerGroupAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetCustomerGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetCustomerGroupList(ctx context.Context, in *GetCustomerGroupAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetCustomerGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetCustomerGroupChat(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetCustomerGroupChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetCustomerGroupChatByChatID(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetCustomerGroupChatByChatID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FlushCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FlushCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SyncCustomerGroup(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SyncCustomerGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FlushCustomerGroup(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FlushCustomerGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) QueryCustomerGroupByCond(ctx context.Context, in *OptionAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_QueryCustomerGroupByCond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SendTextMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SendTextMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SendWarnMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SendWarnMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FindAccountUserList(ctx context.Context, in *FindAccountAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FindAccountUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SyncAccountUser(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SyncAccountUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FlushAccountUser(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FlushAccountUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetAccountUserList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetAccountUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetAccountUserListByOpenIDList(ctx context.Context, in *OpenIDListAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetAccountUserListByOpenIDList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) ModifyAccountUserRemark(ctx context.Context, in *ModifyRemarkAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_ModifyAccountUserRemark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetAccountTagList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetAccountTagList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetOauthCallBackURL(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetOauthCallBackURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SyncContactWayList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SyncContactWayList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FlushContactWay(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FlushContactWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SendAccountTrackMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SendAccountTrackMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SendAccountProcMsg(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SendAccountProcMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) QueryFieldList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_QueryFieldList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FindSupplierList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FindSupplierList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SyncSupplier(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SyncSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FindBusinessCustomerList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FindBusinessCustomerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SyncBusinessCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SyncBusinessCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) UpdateBusinessCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_UpdateBusinessCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FindEnumList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FindEnumList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) QueryNameByType(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_QueryNameByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetBusinessCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetBusinessCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetNeedNotifyCustomerList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetNeedNotifyCustomerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) FindClaimedCustomer(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_FindClaimedCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SaveCustomerPointRecord(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SaveCustomerPointRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GetCustomerPointRecord(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GetCustomerPointRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) ListCustomerPointRecord(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_ListCustomerPointRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) ListUserByCond(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_ListUserByCond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) JudgeTodayIsWorkday(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_JudgeTodayIsWorkday_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) QueryIndicatorCount(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_QueryIndicatorCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) QueryIndicatorDetail(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_QueryIndicatorDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) QueryHalfDayLeaveMap(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_QueryHalfDayLeaveMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) QueryCheckInMonth(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_QueryCheckInMonth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) CalculateUserIndicator(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_CalculateUserIndicator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) GenerateReportRecord(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_GenerateReportRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SyncAcademy(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SyncAcademy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SyncTraining(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SyncTraining_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SyncCourse(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SyncCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) QueryIndicatorCountInBatch(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_QueryIndicatorCountInBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) QuerySupplierBySpNoList(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_QuerySupplierBySpNoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wecomRPCClient) SyncInternshipPlan(ctx context.Context, in *RequestAO, opts ...grpc.CallOption) (*ResponseVO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseVO)
	err := c.cc.Invoke(ctx, WecomRPC_SyncInternshipPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WecomRPCServer is the server API for WecomRPC service.
// All implementations must embed UnimplementedWecomRPCServer
// for forward compatibility.
//
// Interface exported by the server.
type WecomRPCServer interface {
	GetUserList(context.Context, *RequestAO) (*ResponseVO, error)
	GetUserInfo(context.Context, *RequestAO) (*ResponseVO, error)
	SaveUserDetail(context.Context, *UserDetailAO) (*ResponseVO, error)
	GetUserDetailByUserID(context.Context, *RequestAO) (*ResponseVO, error)
	GetUserDetailList(context.Context, *RequestAO) (*ResponseVO, error)
	GetRoleList(context.Context, *RequestAO) (*ResponseVO, error)
	GetRoleByUserID(context.Context, *RequestAO) (*ResponseVO, error)
	GetUserByRoleName(context.Context, *RequestAO) (*ResponseVO, error)
	FindCustomerList(context.Context, *FindCustomerAO) (*ResponseVO, error)
	FindCustomerGroupList(context.Context, *FindCustomerGroupAO) (*ResponseVO, error)
	FindCustomerCouldBeSelectedList(context.Context, *RequestAO) (*ResponseVO, error)
	AddCustomer(context.Context, *AddCustomerAO) (*ResponseVO, error)
	UpdateCustomerRemark(context.Context, *UpdateCustomerAO) (*ResponseVO, error)
	GetCustomerInRobotChat(context.Context, *GetCustomerInRobotChatAO) (*ResponseVO, error)
	GetCustomerGroup(context.Context, *GetCustomerGroupAO) (*ResponseVO, error)
	GetCustomerGroupList(context.Context, *GetCustomerGroupAO) (*ResponseVO, error)
	GetCustomerGroupChat(context.Context, *RequestAO) (*ResponseVO, error)
	GetCustomerGroupChatByChatID(context.Context, *RequestAO) (*ResponseVO, error)
	FlushCustomer(context.Context, *RequestAO) (*ResponseVO, error)
	SyncCustomerGroup(context.Context, *RequestAO) (*ResponseVO, error)
	FlushCustomerGroup(context.Context, *RequestAO) (*ResponseVO, error)
	QueryCustomerGroupByCond(context.Context, *OptionAO) (*ResponseVO, error)
	SendTextMsg(context.Context, *RequestAO) (*ResponseVO, error)
	SendWarnMsg(context.Context, *RequestAO) (*ResponseVO, error)
	FindAccountUserList(context.Context, *FindAccountAO) (*ResponseVO, error)
	SyncAccountUser(context.Context, *RequestAO) (*ResponseVO, error)
	FlushAccountUser(context.Context, *RequestAO) (*ResponseVO, error)
	GetAccountUserList(context.Context, *RequestAO) (*ResponseVO, error)
	GetAccountUserListByOpenIDList(context.Context, *OpenIDListAO) (*ResponseVO, error)
	ModifyAccountUserRemark(context.Context, *ModifyRemarkAO) (*ResponseVO, error)
	GetAccountTagList(context.Context, *RequestAO) (*ResponseVO, error)
	GetOauthCallBackURL(context.Context, *RequestAO) (*ResponseVO, error)
	SyncContactWayList(context.Context, *RequestAO) (*ResponseVO, error)
	FlushContactWay(context.Context, *RequestAO) (*ResponseVO, error)
	SendAccountTrackMsg(context.Context, *RequestAO) (*ResponseVO, error)
	SendAccountProcMsg(context.Context, *RequestAO) (*ResponseVO, error)
	QueryFieldList(context.Context, *RequestAO) (*ResponseVO, error)
	FindSupplierList(context.Context, *RequestAO) (*ResponseVO, error)
	SyncSupplier(context.Context, *RequestAO) (*ResponseVO, error)
	FindBusinessCustomerList(context.Context, *RequestAO) (*ResponseVO, error)
	SyncBusinessCustomer(context.Context, *RequestAO) (*ResponseVO, error)
	UpdateBusinessCustomer(context.Context, *RequestAO) (*ResponseVO, error)
	FindEnumList(context.Context, *RequestAO) (*ResponseVO, error)
	QueryNameByType(context.Context, *RequestAO) (*ResponseVO, error)
	GetBusinessCustomer(context.Context, *RequestAO) (*ResponseVO, error)
	GetNeedNotifyCustomerList(context.Context, *RequestAO) (*ResponseVO, error)
	FindClaimedCustomer(context.Context, *RequestAO) (*ResponseVO, error)
	SaveCustomerPointRecord(context.Context, *RequestAO) (*ResponseVO, error)
	GetCustomerPointRecord(context.Context, *RequestAO) (*ResponseVO, error)
	ListCustomerPointRecord(context.Context, *RequestAO) (*ResponseVO, error)
	ListUserByCond(context.Context, *RequestAO) (*ResponseVO, error)
	JudgeTodayIsWorkday(context.Context, *RequestAO) (*ResponseVO, error)
	QueryIndicatorCount(context.Context, *RequestAO) (*ResponseVO, error)
	QueryIndicatorDetail(context.Context, *RequestAO) (*ResponseVO, error)
	QueryHalfDayLeaveMap(context.Context, *RequestAO) (*ResponseVO, error)
	QueryCheckInMonth(context.Context, *RequestAO) (*ResponseVO, error)
	CalculateUserIndicator(context.Context, *RequestAO) (*ResponseVO, error)
	GenerateReportRecord(context.Context, *RequestAO) (*ResponseVO, error)
	SyncAcademy(context.Context, *RequestAO) (*ResponseVO, error)
	SyncTraining(context.Context, *RequestAO) (*ResponseVO, error)
	SyncCourse(context.Context, *RequestAO) (*ResponseVO, error)
	QueryIndicatorCountInBatch(context.Context, *RequestAO) (*ResponseVO, error)
	QuerySupplierBySpNoList(context.Context, *RequestAO) (*ResponseVO, error)
	SyncInternshipPlan(context.Context, *RequestAO) (*ResponseVO, error)
	mustEmbedUnimplementedWecomRPCServer()
}

// UnimplementedWecomRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWecomRPCServer struct{}

func (UnimplementedWecomRPCServer) GetUserList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedWecomRPCServer) GetUserInfo(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedWecomRPCServer) SaveUserDetail(context.Context, *UserDetailAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserDetail not implemented")
}
func (UnimplementedWecomRPCServer) GetUserDetailByUserID(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetailByUserID not implemented")
}
func (UnimplementedWecomRPCServer) GetUserDetailList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetailList not implemented")
}
func (UnimplementedWecomRPCServer) GetRoleList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedWecomRPCServer) GetRoleByUserID(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByUserID not implemented")
}
func (UnimplementedWecomRPCServer) GetUserByRoleName(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByRoleName not implemented")
}
func (UnimplementedWecomRPCServer) FindCustomerList(context.Context, *FindCustomerAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCustomerList not implemented")
}
func (UnimplementedWecomRPCServer) FindCustomerGroupList(context.Context, *FindCustomerGroupAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCustomerGroupList not implemented")
}
func (UnimplementedWecomRPCServer) FindCustomerCouldBeSelectedList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCustomerCouldBeSelectedList not implemented")
}
func (UnimplementedWecomRPCServer) AddCustomer(context.Context, *AddCustomerAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomer not implemented")
}
func (UnimplementedWecomRPCServer) UpdateCustomerRemark(context.Context, *UpdateCustomerAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerRemark not implemented")
}
func (UnimplementedWecomRPCServer) GetCustomerInRobotChat(context.Context, *GetCustomerInRobotChatAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerInRobotChat not implemented")
}
func (UnimplementedWecomRPCServer) GetCustomerGroup(context.Context, *GetCustomerGroupAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerGroup not implemented")
}
func (UnimplementedWecomRPCServer) GetCustomerGroupList(context.Context, *GetCustomerGroupAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerGroupList not implemented")
}
func (UnimplementedWecomRPCServer) GetCustomerGroupChat(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerGroupChat not implemented")
}
func (UnimplementedWecomRPCServer) GetCustomerGroupChatByChatID(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerGroupChatByChatID not implemented")
}
func (UnimplementedWecomRPCServer) FlushCustomer(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushCustomer not implemented")
}
func (UnimplementedWecomRPCServer) SyncCustomerGroup(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCustomerGroup not implemented")
}
func (UnimplementedWecomRPCServer) FlushCustomerGroup(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushCustomerGroup not implemented")
}
func (UnimplementedWecomRPCServer) QueryCustomerGroupByCond(context.Context, *OptionAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomerGroupByCond not implemented")
}
func (UnimplementedWecomRPCServer) SendTextMsg(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTextMsg not implemented")
}
func (UnimplementedWecomRPCServer) SendWarnMsg(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWarnMsg not implemented")
}
func (UnimplementedWecomRPCServer) FindAccountUserList(context.Context, *FindAccountAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccountUserList not implemented")
}
func (UnimplementedWecomRPCServer) SyncAccountUser(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAccountUser not implemented")
}
func (UnimplementedWecomRPCServer) FlushAccountUser(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushAccountUser not implemented")
}
func (UnimplementedWecomRPCServer) GetAccountUserList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUserList not implemented")
}
func (UnimplementedWecomRPCServer) GetAccountUserListByOpenIDList(context.Context, *OpenIDListAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUserListByOpenIDList not implemented")
}
func (UnimplementedWecomRPCServer) ModifyAccountUserRemark(context.Context, *ModifyRemarkAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAccountUserRemark not implemented")
}
func (UnimplementedWecomRPCServer) GetAccountTagList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountTagList not implemented")
}
func (UnimplementedWecomRPCServer) GetOauthCallBackURL(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthCallBackURL not implemented")
}
func (UnimplementedWecomRPCServer) SyncContactWayList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncContactWayList not implemented")
}
func (UnimplementedWecomRPCServer) FlushContactWay(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushContactWay not implemented")
}
func (UnimplementedWecomRPCServer) SendAccountTrackMsg(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountTrackMsg not implemented")
}
func (UnimplementedWecomRPCServer) SendAccountProcMsg(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountProcMsg not implemented")
}
func (UnimplementedWecomRPCServer) QueryFieldList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFieldList not implemented")
}
func (UnimplementedWecomRPCServer) FindSupplierList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSupplierList not implemented")
}
func (UnimplementedWecomRPCServer) SyncSupplier(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSupplier not implemented")
}
func (UnimplementedWecomRPCServer) FindBusinessCustomerList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBusinessCustomerList not implemented")
}
func (UnimplementedWecomRPCServer) SyncBusinessCustomer(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncBusinessCustomer not implemented")
}
func (UnimplementedWecomRPCServer) UpdateBusinessCustomer(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessCustomer not implemented")
}
func (UnimplementedWecomRPCServer) FindEnumList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnumList not implemented")
}
func (UnimplementedWecomRPCServer) QueryNameByType(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNameByType not implemented")
}
func (UnimplementedWecomRPCServer) GetBusinessCustomer(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessCustomer not implemented")
}
func (UnimplementedWecomRPCServer) GetNeedNotifyCustomerList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeedNotifyCustomerList not implemented")
}
func (UnimplementedWecomRPCServer) FindClaimedCustomer(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindClaimedCustomer not implemented")
}
func (UnimplementedWecomRPCServer) SaveCustomerPointRecord(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCustomerPointRecord not implemented")
}
func (UnimplementedWecomRPCServer) GetCustomerPointRecord(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerPointRecord not implemented")
}
func (UnimplementedWecomRPCServer) ListCustomerPointRecord(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomerPointRecord not implemented")
}
func (UnimplementedWecomRPCServer) ListUserByCond(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserByCond not implemented")
}
func (UnimplementedWecomRPCServer) JudgeTodayIsWorkday(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeTodayIsWorkday not implemented")
}
func (UnimplementedWecomRPCServer) QueryIndicatorCount(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndicatorCount not implemented")
}
func (UnimplementedWecomRPCServer) QueryIndicatorDetail(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndicatorDetail not implemented")
}
func (UnimplementedWecomRPCServer) QueryHalfDayLeaveMap(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHalfDayLeaveMap not implemented")
}
func (UnimplementedWecomRPCServer) QueryCheckInMonth(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCheckInMonth not implemented")
}
func (UnimplementedWecomRPCServer) CalculateUserIndicator(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateUserIndicator not implemented")
}
func (UnimplementedWecomRPCServer) GenerateReportRecord(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReportRecord not implemented")
}
func (UnimplementedWecomRPCServer) SyncAcademy(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAcademy not implemented")
}
func (UnimplementedWecomRPCServer) SyncTraining(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTraining not implemented")
}
func (UnimplementedWecomRPCServer) SyncCourse(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCourse not implemented")
}
func (UnimplementedWecomRPCServer) QueryIndicatorCountInBatch(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndicatorCountInBatch not implemented")
}
func (UnimplementedWecomRPCServer) QuerySupplierBySpNoList(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySupplierBySpNoList not implemented")
}
func (UnimplementedWecomRPCServer) SyncInternshipPlan(context.Context, *RequestAO) (*ResponseVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInternshipPlan not implemented")
}
func (UnimplementedWecomRPCServer) mustEmbedUnimplementedWecomRPCServer() {}
func (UnimplementedWecomRPCServer) testEmbeddedByValue()                  {}

// UnsafeWecomRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WecomRPCServer will
// result in compilation errors.
type UnsafeWecomRPCServer interface {
	mustEmbedUnimplementedWecomRPCServer()
}

func RegisterWecomRPCServer(s grpc.ServiceRegistrar, srv WecomRPCServer) {
	// If the following call pancis, it indicates UnimplementedWecomRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WecomRPC_ServiceDesc, srv)
}

func _WecomRPC_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetUserList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetUserInfo(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SaveUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SaveUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SaveUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SaveUserDetail(ctx, req.(*UserDetailAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetUserDetailByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetUserDetailByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetUserDetailByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetUserDetailByUserID(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetUserDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetUserDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetUserDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetUserDetailList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetRoleList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetRoleByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetRoleByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetRoleByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetRoleByUserID(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetUserByRoleName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetUserByRoleName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetUserByRoleName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetUserByRoleName(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FindCustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCustomerAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FindCustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FindCustomerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FindCustomerList(ctx, req.(*FindCustomerAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FindCustomerGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCustomerGroupAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FindCustomerGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FindCustomerGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FindCustomerGroupList(ctx, req.(*FindCustomerGroupAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FindCustomerCouldBeSelectedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FindCustomerCouldBeSelectedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FindCustomerCouldBeSelectedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FindCustomerCouldBeSelectedList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_AddCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).AddCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_AddCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).AddCustomer(ctx, req.(*AddCustomerAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_UpdateCustomerRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).UpdateCustomerRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_UpdateCustomerRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).UpdateCustomerRemark(ctx, req.(*UpdateCustomerAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetCustomerInRobotChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerInRobotChatAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetCustomerInRobotChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetCustomerInRobotChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetCustomerInRobotChat(ctx, req.(*GetCustomerInRobotChatAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetCustomerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerGroupAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetCustomerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetCustomerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetCustomerGroup(ctx, req.(*GetCustomerGroupAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetCustomerGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerGroupAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetCustomerGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetCustomerGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetCustomerGroupList(ctx, req.(*GetCustomerGroupAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetCustomerGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetCustomerGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetCustomerGroupChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetCustomerGroupChat(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetCustomerGroupChatByChatID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetCustomerGroupChatByChatID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetCustomerGroupChatByChatID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetCustomerGroupChatByChatID(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FlushCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FlushCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FlushCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FlushCustomer(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SyncCustomerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SyncCustomerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SyncCustomerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SyncCustomerGroup(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FlushCustomerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FlushCustomerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FlushCustomerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FlushCustomerGroup(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_QueryCustomerGroupByCond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).QueryCustomerGroupByCond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_QueryCustomerGroupByCond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).QueryCustomerGroupByCond(ctx, req.(*OptionAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SendTextMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SendTextMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SendTextMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SendTextMsg(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SendWarnMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SendWarnMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SendWarnMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SendWarnMsg(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FindAccountUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FindAccountUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FindAccountUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FindAccountUserList(ctx, req.(*FindAccountAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SyncAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SyncAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SyncAccountUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SyncAccountUser(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FlushAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FlushAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FlushAccountUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FlushAccountUser(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetAccountUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetAccountUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetAccountUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetAccountUserList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetAccountUserListByOpenIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenIDListAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetAccountUserListByOpenIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetAccountUserListByOpenIDList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetAccountUserListByOpenIDList(ctx, req.(*OpenIDListAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_ModifyAccountUserRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRemarkAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).ModifyAccountUserRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_ModifyAccountUserRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).ModifyAccountUserRemark(ctx, req.(*ModifyRemarkAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetAccountTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetAccountTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetAccountTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetAccountTagList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetOauthCallBackURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetOauthCallBackURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetOauthCallBackURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetOauthCallBackURL(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SyncContactWayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SyncContactWayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SyncContactWayList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SyncContactWayList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FlushContactWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FlushContactWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FlushContactWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FlushContactWay(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SendAccountTrackMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SendAccountTrackMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SendAccountTrackMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SendAccountTrackMsg(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SendAccountProcMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SendAccountProcMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SendAccountProcMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SendAccountProcMsg(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_QueryFieldList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).QueryFieldList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_QueryFieldList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).QueryFieldList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FindSupplierList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FindSupplierList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FindSupplierList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FindSupplierList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SyncSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SyncSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SyncSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SyncSupplier(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FindBusinessCustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FindBusinessCustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FindBusinessCustomerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FindBusinessCustomerList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SyncBusinessCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SyncBusinessCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SyncBusinessCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SyncBusinessCustomer(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_UpdateBusinessCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).UpdateBusinessCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_UpdateBusinessCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).UpdateBusinessCustomer(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FindEnumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FindEnumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FindEnumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FindEnumList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_QueryNameByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).QueryNameByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_QueryNameByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).QueryNameByType(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetBusinessCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetBusinessCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetBusinessCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetBusinessCustomer(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetNeedNotifyCustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetNeedNotifyCustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetNeedNotifyCustomerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetNeedNotifyCustomerList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_FindClaimedCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).FindClaimedCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_FindClaimedCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).FindClaimedCustomer(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SaveCustomerPointRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SaveCustomerPointRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SaveCustomerPointRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SaveCustomerPointRecord(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GetCustomerPointRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GetCustomerPointRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GetCustomerPointRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GetCustomerPointRecord(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_ListCustomerPointRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).ListCustomerPointRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_ListCustomerPointRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).ListCustomerPointRecord(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_ListUserByCond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).ListUserByCond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_ListUserByCond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).ListUserByCond(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_JudgeTodayIsWorkday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).JudgeTodayIsWorkday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_JudgeTodayIsWorkday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).JudgeTodayIsWorkday(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_QueryIndicatorCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).QueryIndicatorCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_QueryIndicatorCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).QueryIndicatorCount(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_QueryIndicatorDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).QueryIndicatorDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_QueryIndicatorDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).QueryIndicatorDetail(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_QueryHalfDayLeaveMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).QueryHalfDayLeaveMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_QueryHalfDayLeaveMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).QueryHalfDayLeaveMap(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_QueryCheckInMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).QueryCheckInMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_QueryCheckInMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).QueryCheckInMonth(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_CalculateUserIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).CalculateUserIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_CalculateUserIndicator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).CalculateUserIndicator(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_GenerateReportRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).GenerateReportRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_GenerateReportRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).GenerateReportRecord(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SyncAcademy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SyncAcademy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SyncAcademy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SyncAcademy(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SyncTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SyncTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SyncTraining_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SyncTraining(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SyncCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SyncCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SyncCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SyncCourse(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_QueryIndicatorCountInBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).QueryIndicatorCountInBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_QueryIndicatorCountInBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).QueryIndicatorCountInBatch(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_QuerySupplierBySpNoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).QuerySupplierBySpNoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_QuerySupplierBySpNoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).QuerySupplierBySpNoList(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

func _WecomRPC_SyncInternshipPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WecomRPCServer).SyncInternshipPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WecomRPC_SyncInternshipPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WecomRPCServer).SyncInternshipPlan(ctx, req.(*RequestAO))
	}
	return interceptor(ctx, in, info, handler)
}

// WecomRPC_ServiceDesc is the grpc.ServiceDesc for WecomRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WecomRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wrpc.WecomRPC",
	HandlerType: (*WecomRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserList",
			Handler:    _WecomRPC_GetUserList_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _WecomRPC_GetUserInfo_Handler,
		},
		{
			MethodName: "SaveUserDetail",
			Handler:    _WecomRPC_SaveUserDetail_Handler,
		},
		{
			MethodName: "GetUserDetailByUserID",
			Handler:    _WecomRPC_GetUserDetailByUserID_Handler,
		},
		{
			MethodName: "GetUserDetailList",
			Handler:    _WecomRPC_GetUserDetailList_Handler,
		},
		{
			MethodName: "GetRoleList",
			Handler:    _WecomRPC_GetRoleList_Handler,
		},
		{
			MethodName: "GetRoleByUserID",
			Handler:    _WecomRPC_GetRoleByUserID_Handler,
		},
		{
			MethodName: "GetUserByRoleName",
			Handler:    _WecomRPC_GetUserByRoleName_Handler,
		},
		{
			MethodName: "FindCustomerList",
			Handler:    _WecomRPC_FindCustomerList_Handler,
		},
		{
			MethodName: "FindCustomerGroupList",
			Handler:    _WecomRPC_FindCustomerGroupList_Handler,
		},
		{
			MethodName: "FindCustomerCouldBeSelectedList",
			Handler:    _WecomRPC_FindCustomerCouldBeSelectedList_Handler,
		},
		{
			MethodName: "AddCustomer",
			Handler:    _WecomRPC_AddCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomerRemark",
			Handler:    _WecomRPC_UpdateCustomerRemark_Handler,
		},
		{
			MethodName: "GetCustomerInRobotChat",
			Handler:    _WecomRPC_GetCustomerInRobotChat_Handler,
		},
		{
			MethodName: "GetCustomerGroup",
			Handler:    _WecomRPC_GetCustomerGroup_Handler,
		},
		{
			MethodName: "GetCustomerGroupList",
			Handler:    _WecomRPC_GetCustomerGroupList_Handler,
		},
		{
			MethodName: "GetCustomerGroupChat",
			Handler:    _WecomRPC_GetCustomerGroupChat_Handler,
		},
		{
			MethodName: "GetCustomerGroupChatByChatID",
			Handler:    _WecomRPC_GetCustomerGroupChatByChatID_Handler,
		},
		{
			MethodName: "FlushCustomer",
			Handler:    _WecomRPC_FlushCustomer_Handler,
		},
		{
			MethodName: "SyncCustomerGroup",
			Handler:    _WecomRPC_SyncCustomerGroup_Handler,
		},
		{
			MethodName: "FlushCustomerGroup",
			Handler:    _WecomRPC_FlushCustomerGroup_Handler,
		},
		{
			MethodName: "QueryCustomerGroupByCond",
			Handler:    _WecomRPC_QueryCustomerGroupByCond_Handler,
		},
		{
			MethodName: "SendTextMsg",
			Handler:    _WecomRPC_SendTextMsg_Handler,
		},
		{
			MethodName: "SendWarnMsg",
			Handler:    _WecomRPC_SendWarnMsg_Handler,
		},
		{
			MethodName: "FindAccountUserList",
			Handler:    _WecomRPC_FindAccountUserList_Handler,
		},
		{
			MethodName: "SyncAccountUser",
			Handler:    _WecomRPC_SyncAccountUser_Handler,
		},
		{
			MethodName: "FlushAccountUser",
			Handler:    _WecomRPC_FlushAccountUser_Handler,
		},
		{
			MethodName: "GetAccountUserList",
			Handler:    _WecomRPC_GetAccountUserList_Handler,
		},
		{
			MethodName: "GetAccountUserListByOpenIDList",
			Handler:    _WecomRPC_GetAccountUserListByOpenIDList_Handler,
		},
		{
			MethodName: "ModifyAccountUserRemark",
			Handler:    _WecomRPC_ModifyAccountUserRemark_Handler,
		},
		{
			MethodName: "GetAccountTagList",
			Handler:    _WecomRPC_GetAccountTagList_Handler,
		},
		{
			MethodName: "GetOauthCallBackURL",
			Handler:    _WecomRPC_GetOauthCallBackURL_Handler,
		},
		{
			MethodName: "SyncContactWayList",
			Handler:    _WecomRPC_SyncContactWayList_Handler,
		},
		{
			MethodName: "FlushContactWay",
			Handler:    _WecomRPC_FlushContactWay_Handler,
		},
		{
			MethodName: "SendAccountTrackMsg",
			Handler:    _WecomRPC_SendAccountTrackMsg_Handler,
		},
		{
			MethodName: "SendAccountProcMsg",
			Handler:    _WecomRPC_SendAccountProcMsg_Handler,
		},
		{
			MethodName: "QueryFieldList",
			Handler:    _WecomRPC_QueryFieldList_Handler,
		},
		{
			MethodName: "FindSupplierList",
			Handler:    _WecomRPC_FindSupplierList_Handler,
		},
		{
			MethodName: "SyncSupplier",
			Handler:    _WecomRPC_SyncSupplier_Handler,
		},
		{
			MethodName: "FindBusinessCustomerList",
			Handler:    _WecomRPC_FindBusinessCustomerList_Handler,
		},
		{
			MethodName: "SyncBusinessCustomer",
			Handler:    _WecomRPC_SyncBusinessCustomer_Handler,
		},
		{
			MethodName: "UpdateBusinessCustomer",
			Handler:    _WecomRPC_UpdateBusinessCustomer_Handler,
		},
		{
			MethodName: "FindEnumList",
			Handler:    _WecomRPC_FindEnumList_Handler,
		},
		{
			MethodName: "QueryNameByType",
			Handler:    _WecomRPC_QueryNameByType_Handler,
		},
		{
			MethodName: "GetBusinessCustomer",
			Handler:    _WecomRPC_GetBusinessCustomer_Handler,
		},
		{
			MethodName: "GetNeedNotifyCustomerList",
			Handler:    _WecomRPC_GetNeedNotifyCustomerList_Handler,
		},
		{
			MethodName: "FindClaimedCustomer",
			Handler:    _WecomRPC_FindClaimedCustomer_Handler,
		},
		{
			MethodName: "SaveCustomerPointRecord",
			Handler:    _WecomRPC_SaveCustomerPointRecord_Handler,
		},
		{
			MethodName: "GetCustomerPointRecord",
			Handler:    _WecomRPC_GetCustomerPointRecord_Handler,
		},
		{
			MethodName: "ListCustomerPointRecord",
			Handler:    _WecomRPC_ListCustomerPointRecord_Handler,
		},
		{
			MethodName: "ListUserByCond",
			Handler:    _WecomRPC_ListUserByCond_Handler,
		},
		{
			MethodName: "JudgeTodayIsWorkday",
			Handler:    _WecomRPC_JudgeTodayIsWorkday_Handler,
		},
		{
			MethodName: "QueryIndicatorCount",
			Handler:    _WecomRPC_QueryIndicatorCount_Handler,
		},
		{
			MethodName: "QueryIndicatorDetail",
			Handler:    _WecomRPC_QueryIndicatorDetail_Handler,
		},
		{
			MethodName: "QueryHalfDayLeaveMap",
			Handler:    _WecomRPC_QueryHalfDayLeaveMap_Handler,
		},
		{
			MethodName: "QueryCheckInMonth",
			Handler:    _WecomRPC_QueryCheckInMonth_Handler,
		},
		{
			MethodName: "CalculateUserIndicator",
			Handler:    _WecomRPC_CalculateUserIndicator_Handler,
		},
		{
			MethodName: "GenerateReportRecord",
			Handler:    _WecomRPC_GenerateReportRecord_Handler,
		},
		{
			MethodName: "SyncAcademy",
			Handler:    _WecomRPC_SyncAcademy_Handler,
		},
		{
			MethodName: "SyncTraining",
			Handler:    _WecomRPC_SyncTraining_Handler,
		},
		{
			MethodName: "SyncCourse",
			Handler:    _WecomRPC_SyncCourse_Handler,
		},
		{
			MethodName: "QueryIndicatorCountInBatch",
			Handler:    _WecomRPC_QueryIndicatorCountInBatch_Handler,
		},
		{
			MethodName: "QuerySupplierBySpNoList",
			Handler:    _WecomRPC_QuerySupplierBySpNoList_Handler,
		},
		{
			MethodName: "SyncInternshipPlan",
			Handler:    _WecomRPC_SyncInternshipPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wecom/wecom-rpc.proto",
}
