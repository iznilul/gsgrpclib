// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//edition = "2023";

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: proto/wecom/wecom-rpc.proto

package wecom_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	UserID        string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	RequestUserID string `protobuf:"bytes,3,opt,name=requestUserID,proto3" json:"requestUserID,omitempty"`
	AppName       string `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
}

func (x *MessageAO) Reset() {
	*x = MessageAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAO) ProtoMessage() {}

func (x *MessageAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAO.ProtoReflect.Descriptor instead.
func (*MessageAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *MessageAO) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageAO) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *MessageAO) GetRequestUserID() string {
	if x != nil {
		return x.RequestUserID
	}
	return ""
}

func (x *MessageAO) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type OpenIDListAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenIDList []string `protobuf:"bytes,1,rep,name=openIDList,proto3" json:"openIDList,omitempty"`
}

func (x *OpenIDListAO) Reset() {
	*x = OpenIDListAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIDListAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIDListAO) ProtoMessage() {}

func (x *OpenIDListAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIDListAO.ProtoReflect.Descriptor instead.
func (*OpenIDListAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *OpenIDListAO) GetOpenIDList() []string {
	if x != nil {
		return x.OpenIDList
	}
	return nil
}

type ModifyRemarkAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark string `protobuf:"bytes,1,opt,name=remark,proto3" json:"remark,omitempty"`
	OpenID string `protobuf:"bytes,2,opt,name=openID,proto3" json:"openID,omitempty"`
}

func (x *ModifyRemarkAO) Reset() {
	*x = ModifyRemarkAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRemarkAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRemarkAO) ProtoMessage() {}

func (x *ModifyRemarkAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRemarkAO.ProtoReflect.Descriptor instead.
func (*ModifyRemarkAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *ModifyRemarkAO) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ModifyRemarkAO) GetOpenID() string {
	if x != nil {
		return x.OpenID
	}
	return ""
}

type OptionAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Flag  bool   `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *OptionAO) Reset() {
	*x = OptionAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionAO) ProtoMessage() {}

func (x *OptionAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionAO.ProtoReflect.Descriptor instead.
func (*OptionAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *OptionAO) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *OptionAO) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *OptionAO) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OptionAO) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type UserDetailAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Gender  string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Email   string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Avatar  string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	QrCode  string `protobuf:"bytes,5,opt,name=qrCode,proto3" json:"qrCode,omitempty"`
	Mobile  string `protobuf:"bytes,6,opt,name=mobile,proto3" json:"mobile,omitempty"`
	BizMail string `protobuf:"bytes,7,opt,name=bizMail,proto3" json:"bizMail,omitempty"`
	Address string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UserDetailAO) Reset() {
	*x = UserDetailAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetailAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailAO) ProtoMessage() {}

func (x *UserDetailAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailAO.ProtoReflect.Descriptor instead.
func (*UserDetailAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *UserDetailAO) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserDetailAO) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserDetailAO) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserDetailAO) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserDetailAO) GetQrCode() string {
	if x != nil {
		return x.QrCode
	}
	return ""
}

func (x *UserDetailAO) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *UserDetailAO) GetBizMail() string {
	if x != nil {
		return x.BizMail
	}
	return ""
}

func (x *UserDetailAO) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetCustomerGroupAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID    string `protobuf:"bytes,1,opt,name=chatID,proto3" json:"chatID,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *GetCustomerGroupAO) Reset() {
	*x = GetCustomerGroupAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerGroupAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerGroupAO) ProtoMessage() {}

func (x *GetCustomerGroupAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerGroupAO.ProtoReflect.Descriptor instead.
func (*GetCustomerGroupAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetCustomerGroupAO) GetChatID() string {
	if x != nil {
		return x.ChatID
	}
	return ""
}

func (x *GetCustomerGroupAO) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type FindAccountAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark      string `protobuf:"bytes,1,opt,name=remark,proto3" json:"remark,omitempty"`
	CurrentPage int32  `protobuf:"varint,2,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	PageSize    int32  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TagID       int32  `protobuf:"varint,4,opt,name=tagID,proto3" json:"tagID,omitempty"`
}

func (x *FindAccountAO) Reset() {
	*x = FindAccountAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAccountAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAccountAO) ProtoMessage() {}

func (x *FindAccountAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAccountAO.ProtoReflect.Descriptor instead.
func (*FindAccountAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *FindAccountAO) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *FindAccountAO) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *FindAccountAO) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindAccountAO) GetTagID() int32 {
	if x != nil {
		return x.TagID
	}
	return 0
}

type FindCustomerAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark      string `protobuf:"bytes,1,opt,name=remark,proto3" json:"remark,omitempty"`
	CurrentPage int32  `protobuf:"varint,2,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	PageSize    int32  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	UserID      string `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
	Searcher    string `protobuf:"bytes,5,opt,name=searcher,proto3" json:"searcher,omitempty"`
	All         bool   `protobuf:"varint,6,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *FindCustomerAO) Reset() {
	*x = FindCustomerAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCustomerAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCustomerAO) ProtoMessage() {}

func (x *FindCustomerAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCustomerAO.ProtoReflect.Descriptor instead.
func (*FindCustomerAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *FindCustomerAO) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *FindCustomerAO) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *FindCustomerAO) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindCustomerAO) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *FindCustomerAO) GetSearcher() string {
	if x != nil {
		return x.Searcher
	}
	return ""
}

func (x *FindCustomerAO) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type FindCustomerGroupAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CurrentPage int32  `protobuf:"varint,2,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	PageSize    int32  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	UserID      string `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
	Searcher    string `protobuf:"bytes,5,opt,name=searcher,proto3" json:"searcher,omitempty"`
	All         bool   `protobuf:"varint,6,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *FindCustomerGroupAO) Reset() {
	*x = FindCustomerGroupAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCustomerGroupAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCustomerGroupAO) ProtoMessage() {}

func (x *FindCustomerGroupAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCustomerGroupAO.ProtoReflect.Descriptor instead.
func (*FindCustomerGroupAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *FindCustomerGroupAO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FindCustomerGroupAO) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *FindCustomerGroupAO) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindCustomerGroupAO) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *FindCustomerGroupAO) GetSearcher() string {
	if x != nil {
		return x.Searcher
	}
	return ""
}

func (x *FindCustomerGroupAO) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type AddCustomerAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MarkName string `protobuf:"bytes,3,opt,name=markName,proto3" json:"markName,omitempty"`
	Phone    string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *AddCustomerAO) Reset() {
	*x = AddCustomerAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomerAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomerAO) ProtoMessage() {}

func (x *AddCustomerAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomerAO.ProtoReflect.Descriptor instead.
func (*AddCustomerAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *AddCustomerAO) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddCustomerAO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCustomerAO) GetMarkName() string {
	if x != nil {
		return x.MarkName
	}
	return ""
}

func (x *AddCustomerAO) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type UpdateCustomerAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	MarkName    string `protobuf:"bytes,2,opt,name=markName,proto3" json:"markName,omitempty"`
	OldMarkName string `protobuf:"bytes,3,opt,name=oldMarkName,proto3" json:"oldMarkName,omitempty"`
}

func (x *UpdateCustomerAO) Reset() {
	*x = UpdateCustomerAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerAO) ProtoMessage() {}

func (x *UpdateCustomerAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerAO.ProtoReflect.Descriptor instead.
func (*UpdateCustomerAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateCustomerAO) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateCustomerAO) GetMarkName() string {
	if x != nil {
		return x.MarkName
	}
	return ""
}

func (x *UpdateCustomerAO) GetOldMarkName() string {
	if x != nil {
		return x.OldMarkName
	}
	return ""
}

type GetCustomerInRobotChatAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark         string `protobuf:"bytes,1,opt,name=remark,proto3" json:"remark,omitempty"`
	ExternalUserID string `protobuf:"bytes,2,opt,name=externalUserID,proto3" json:"externalUserID,omitempty"`
}

func (x *GetCustomerInRobotChatAO) Reset() {
	*x = GetCustomerInRobotChatAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerInRobotChatAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerInRobotChatAO) ProtoMessage() {}

func (x *GetCustomerInRobotChatAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerInRobotChatAO.ProtoReflect.Descriptor instead.
func (*GetCustomerInRobotChatAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetCustomerInRobotChatAO) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *GetCustomerInRobotChatAO) GetExternalUserID() string {
	if x != nil {
		return x.ExternalUserID
	}
	return ""
}

type RequestAO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *anypb.Any   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	DataList []*anypb.Any `protobuf:"bytes,2,rep,name=dataList,proto3" json:"dataList,omitempty"`
	Map      *anypb.Any   `protobuf:"bytes,3,opt,name=map,proto3" json:"map,omitempty"`
	MapList  []*anypb.Any `protobuf:"bytes,4,rep,name=mapList,proto3" json:"mapList,omitempty"`
}

func (x *RequestAO) Reset() {
	*x = RequestAO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAO) ProtoMessage() {}

func (x *RequestAO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAO.ProtoReflect.Descriptor instead.
func (*RequestAO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *RequestAO) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RequestAO) GetDataList() []*anypb.Any {
	if x != nil {
		return x.DataList
	}
	return nil
}

func (x *RequestAO) GetMap() *anypb.Any {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *RequestAO) GetMapList() []*anypb.Any {
	if x != nil {
		return x.MapList
	}
	return nil
}

type ResponseVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// google.protobuf.Any data = 3;
	Data     *anypb.Any   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	DataList []*anypb.Any `protobuf:"bytes,4,rep,name=dataList,proto3" json:"dataList,omitempty"`
	Map      *anypb.Any   `protobuf:"bytes,5,opt,name=map,proto3" json:"map,omitempty"`
	MapList  []*anypb.Any `protobuf:"bytes,6,rep,name=mapList,proto3" json:"mapList,omitempty"`
}

func (x *ResponseVO) Reset() {
	*x = ResponseVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseVO) ProtoMessage() {}

func (x *ResponseVO) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseVO.ProtoReflect.Descriptor instead.
func (*ResponseVO) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *ResponseVO) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseVO) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ResponseVO) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseVO) GetDataList() []*anypb.Any {
	if x != nil {
		return x.DataList
	}
	return nil
}

func (x *ResponseVO) GetMap() *anypb.Any {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *ResponseVO) GetMapList() []*anypb.Any {
	if x != nil {
		return x.MapList
	}
	return nil
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *anypb.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wecom_wecom_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_proto_wecom_wecom_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_proto_wecom_wecom_rpc_proto protoreflect.FileDescriptor

var file_proto_wecom_wecom_rpc_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65,
	0x63, 0x6f, 0x6d, 0x2d, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x77,
	0x72, 0x70, 0x63, 0x1a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x4f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x4f, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x41, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x4f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xd0, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x4d, 0x61, 0x69,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x4d, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x4f,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x44, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x41, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61,
	0x6c, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x4f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61,
	0x6c, 0x6c, 0x22, 0x6d, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x41, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x68, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x41, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x26, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x4f, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x61, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x28,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x61,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x6d,
	0x61, 0x70, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x48, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xed, 0x1c, 0x0a,
	0x08, 0x57, 0x65, 0x63, 0x6f, 0x6d, 0x52, 0x50, 0x43, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x32, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x77,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f,
	0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a,
	0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x4f, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6c, 0x64, 0x42, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x4f, 0x1a,
	0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x4f, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1e, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x4f, 0x1a,
	0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x4f, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x42, 0x79,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0d, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x77,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x12, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x12, 0x0e, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x57, 0x61, 0x72, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x36,
	0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x10, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x77,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x4f,
	0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x4f, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x14, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f,
	0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a,
	0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x4f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x57, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0f, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x57, 0x61, 0x79, 0x12, 0x0f, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10,
	0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x4d, 0x73, 0x67, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12,
	0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f,
	0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x4f, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0f, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10,
	0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0f, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10,
	0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0f, 0x2e, 0x77,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0f, 0x2e, 0x77,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e,
	0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x13, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x49, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x64, 0x61, 0x79, 0x12,
	0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f,
	0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x4f, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x61, 0x6c, 0x66, 0x44, 0x61, 0x79, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x11, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f,
	0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x4f, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x16, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f,
	0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a,
	0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x4f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0f, 0x2e, 0x77, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00,
	0x12, 0x32, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x12,
	0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f,
	0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x4f, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x1a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0f, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x4f, 0x22, 0x00, 0x42, 0x1e, 0x5a, 0x1c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x7a, 0x6e, 0x69, 0x6c,
	0x75, 0x6c, 0x2f, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x5f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_wecom_wecom_rpc_proto_rawDescOnce sync.Once
	file_proto_wecom_wecom_rpc_proto_rawDescData = file_proto_wecom_wecom_rpc_proto_rawDesc
)

func file_proto_wecom_wecom_rpc_proto_rawDescGZIP() []byte {
	file_proto_wecom_wecom_rpc_proto_rawDescOnce.Do(func() {
		file_proto_wecom_wecom_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_wecom_wecom_rpc_proto_rawDescData)
	})
	return file_proto_wecom_wecom_rpc_proto_rawDescData
}

var file_proto_wecom_wecom_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_wecom_wecom_rpc_proto_goTypes = []any{
	(*MessageAO)(nil),                // 0: wrpc.MessageAO
	(*OpenIDListAO)(nil),             // 1: wrpc.OpenIDListAO
	(*ModifyRemarkAO)(nil),           // 2: wrpc.ModifyRemarkAO
	(*OptionAO)(nil),                 // 3: wrpc.OptionAO
	(*UserDetailAO)(nil),             // 4: wrpc.UserDetailAO
	(*GetCustomerGroupAO)(nil),       // 5: wrpc.GetCustomerGroupAO
	(*FindAccountAO)(nil),            // 6: wrpc.FindAccountAO
	(*FindCustomerAO)(nil),           // 7: wrpc.FindCustomerAO
	(*FindCustomerGroupAO)(nil),      // 8: wrpc.FindCustomerGroupAO
	(*AddCustomerAO)(nil),            // 9: wrpc.AddCustomerAO
	(*UpdateCustomerAO)(nil),         // 10: wrpc.UpdateCustomerAO
	(*GetCustomerInRobotChatAO)(nil), // 11: wrpc.GetCustomerInRobotChatAO
	(*RequestAO)(nil),                // 12: wrpc.RequestAO
	(*ResponseVO)(nil),               // 13: wrpc.ResponseVO
	(*KeyValue)(nil),                 // 14: wrpc.KeyValue
	(*anypb.Any)(nil),                // 15: google.protobuf.Any
}
var file_proto_wecom_wecom_rpc_proto_depIdxs = []int32{
	15, // 0: wrpc.RequestAO.data:type_name -> google.protobuf.Any
	15, // 1: wrpc.RequestAO.dataList:type_name -> google.protobuf.Any
	15, // 2: wrpc.RequestAO.map:type_name -> google.protobuf.Any
	15, // 3: wrpc.RequestAO.mapList:type_name -> google.protobuf.Any
	15, // 4: wrpc.ResponseVO.data:type_name -> google.protobuf.Any
	15, // 5: wrpc.ResponseVO.dataList:type_name -> google.protobuf.Any
	15, // 6: wrpc.ResponseVO.map:type_name -> google.protobuf.Any
	15, // 7: wrpc.ResponseVO.mapList:type_name -> google.protobuf.Any
	15, // 8: wrpc.KeyValue.value:type_name -> google.protobuf.Any
	12, // 9: wrpc.WecomRPC.GetUserList:input_type -> wrpc.RequestAO
	12, // 10: wrpc.WecomRPC.GetUserInfo:input_type -> wrpc.RequestAO
	4,  // 11: wrpc.WecomRPC.SaveUserDetail:input_type -> wrpc.UserDetailAO
	12, // 12: wrpc.WecomRPC.GetUserDetailByUserID:input_type -> wrpc.RequestAO
	12, // 13: wrpc.WecomRPC.GetUserDetailList:input_type -> wrpc.RequestAO
	12, // 14: wrpc.WecomRPC.GetRoleList:input_type -> wrpc.RequestAO
	12, // 15: wrpc.WecomRPC.GetRoleByUserID:input_type -> wrpc.RequestAO
	12, // 16: wrpc.WecomRPC.GetUserByRoleName:input_type -> wrpc.RequestAO
	7,  // 17: wrpc.WecomRPC.FindCustomerList:input_type -> wrpc.FindCustomerAO
	8,  // 18: wrpc.WecomRPC.FindCustomerGroupList:input_type -> wrpc.FindCustomerGroupAO
	12, // 19: wrpc.WecomRPC.FindCustomerCouldBeSelectedList:input_type -> wrpc.RequestAO
	9,  // 20: wrpc.WecomRPC.AddCustomer:input_type -> wrpc.AddCustomerAO
	10, // 21: wrpc.WecomRPC.UpdateCustomerRemark:input_type -> wrpc.UpdateCustomerAO
	11, // 22: wrpc.WecomRPC.GetCustomerInRobotChat:input_type -> wrpc.GetCustomerInRobotChatAO
	5,  // 23: wrpc.WecomRPC.GetCustomerGroup:input_type -> wrpc.GetCustomerGroupAO
	5,  // 24: wrpc.WecomRPC.GetCustomerGroupList:input_type -> wrpc.GetCustomerGroupAO
	12, // 25: wrpc.WecomRPC.GetCustomerGroupChat:input_type -> wrpc.RequestAO
	12, // 26: wrpc.WecomRPC.GetCustomerGroupChatByChatID:input_type -> wrpc.RequestAO
	12, // 27: wrpc.WecomRPC.FlushCustomer:input_type -> wrpc.RequestAO
	12, // 28: wrpc.WecomRPC.SyncCustomerGroup:input_type -> wrpc.RequestAO
	12, // 29: wrpc.WecomRPC.FlushCustomerGroup:input_type -> wrpc.RequestAO
	3,  // 30: wrpc.WecomRPC.QueryCustomerGroupByCond:input_type -> wrpc.OptionAO
	12, // 31: wrpc.WecomRPC.SendTextMsg:input_type -> wrpc.RequestAO
	12, // 32: wrpc.WecomRPC.SendWarnMsg:input_type -> wrpc.RequestAO
	6,  // 33: wrpc.WecomRPC.FindAccountUserList:input_type -> wrpc.FindAccountAO
	12, // 34: wrpc.WecomRPC.SyncAccountUser:input_type -> wrpc.RequestAO
	12, // 35: wrpc.WecomRPC.FlushAccountUser:input_type -> wrpc.RequestAO
	12, // 36: wrpc.WecomRPC.GetAccountUserList:input_type -> wrpc.RequestAO
	1,  // 37: wrpc.WecomRPC.GetAccountUserListByOpenIDList:input_type -> wrpc.OpenIDListAO
	2,  // 38: wrpc.WecomRPC.ModifyAccountUserRemark:input_type -> wrpc.ModifyRemarkAO
	12, // 39: wrpc.WecomRPC.GetAccountTagList:input_type -> wrpc.RequestAO
	12, // 40: wrpc.WecomRPC.GetOauthCallBackURL:input_type -> wrpc.RequestAO
	12, // 41: wrpc.WecomRPC.SyncContactWayList:input_type -> wrpc.RequestAO
	12, // 42: wrpc.WecomRPC.FlushContactWay:input_type -> wrpc.RequestAO
	12, // 43: wrpc.WecomRPC.SendAccountTrackMsg:input_type -> wrpc.RequestAO
	12, // 44: wrpc.WecomRPC.SendAccountProcMsg:input_type -> wrpc.RequestAO
	12, // 45: wrpc.WecomRPC.QueryFieldList:input_type -> wrpc.RequestAO
	12, // 46: wrpc.WecomRPC.FindSupplierList:input_type -> wrpc.RequestAO
	12, // 47: wrpc.WecomRPC.SyncSupplier:input_type -> wrpc.RequestAO
	12, // 48: wrpc.WecomRPC.FindBusinessCustomerList:input_type -> wrpc.RequestAO
	12, // 49: wrpc.WecomRPC.SyncBusinessCustomer:input_type -> wrpc.RequestAO
	12, // 50: wrpc.WecomRPC.UpdateBusinessCustomer:input_type -> wrpc.RequestAO
	12, // 51: wrpc.WecomRPC.FindEnumList:input_type -> wrpc.RequestAO
	12, // 52: wrpc.WecomRPC.QueryNameByType:input_type -> wrpc.RequestAO
	12, // 53: wrpc.WecomRPC.GetBusinessCustomer:input_type -> wrpc.RequestAO
	12, // 54: wrpc.WecomRPC.GetNeedNotifyCustomerList:input_type -> wrpc.RequestAO
	12, // 55: wrpc.WecomRPC.FindClaimedCustomer:input_type -> wrpc.RequestAO
	12, // 56: wrpc.WecomRPC.SaveCustomerPointRecord:input_type -> wrpc.RequestAO
	12, // 57: wrpc.WecomRPC.GetCustomerPointRecord:input_type -> wrpc.RequestAO
	12, // 58: wrpc.WecomRPC.ListCustomerPointRecord:input_type -> wrpc.RequestAO
	12, // 59: wrpc.WecomRPC.ListUserByCond:input_type -> wrpc.RequestAO
	12, // 60: wrpc.WecomRPC.JudgeTodayIsWorkday:input_type -> wrpc.RequestAO
	12, // 61: wrpc.WecomRPC.QueryIndicatorCount:input_type -> wrpc.RequestAO
	12, // 62: wrpc.WecomRPC.QueryIndicatorDetail:input_type -> wrpc.RequestAO
	12, // 63: wrpc.WecomRPC.QueryHalfDayLeaveMap:input_type -> wrpc.RequestAO
	12, // 64: wrpc.WecomRPC.QueryCheckInMonth:input_type -> wrpc.RequestAO
	12, // 65: wrpc.WecomRPC.CalculateUserIndicator:input_type -> wrpc.RequestAO
	12, // 66: wrpc.WecomRPC.GenerateReportRecord:input_type -> wrpc.RequestAO
	12, // 67: wrpc.WecomRPC.SyncAcademy:input_type -> wrpc.RequestAO
	12, // 68: wrpc.WecomRPC.SyncTraining:input_type -> wrpc.RequestAO
	12, // 69: wrpc.WecomRPC.QueryIndicatorCountInBatch:input_type -> wrpc.RequestAO
	13, // 70: wrpc.WecomRPC.GetUserList:output_type -> wrpc.ResponseVO
	13, // 71: wrpc.WecomRPC.GetUserInfo:output_type -> wrpc.ResponseVO
	13, // 72: wrpc.WecomRPC.SaveUserDetail:output_type -> wrpc.ResponseVO
	13, // 73: wrpc.WecomRPC.GetUserDetailByUserID:output_type -> wrpc.ResponseVO
	13, // 74: wrpc.WecomRPC.GetUserDetailList:output_type -> wrpc.ResponseVO
	13, // 75: wrpc.WecomRPC.GetRoleList:output_type -> wrpc.ResponseVO
	13, // 76: wrpc.WecomRPC.GetRoleByUserID:output_type -> wrpc.ResponseVO
	13, // 77: wrpc.WecomRPC.GetUserByRoleName:output_type -> wrpc.ResponseVO
	13, // 78: wrpc.WecomRPC.FindCustomerList:output_type -> wrpc.ResponseVO
	13, // 79: wrpc.WecomRPC.FindCustomerGroupList:output_type -> wrpc.ResponseVO
	13, // 80: wrpc.WecomRPC.FindCustomerCouldBeSelectedList:output_type -> wrpc.ResponseVO
	13, // 81: wrpc.WecomRPC.AddCustomer:output_type -> wrpc.ResponseVO
	13, // 82: wrpc.WecomRPC.UpdateCustomerRemark:output_type -> wrpc.ResponseVO
	13, // 83: wrpc.WecomRPC.GetCustomerInRobotChat:output_type -> wrpc.ResponseVO
	13, // 84: wrpc.WecomRPC.GetCustomerGroup:output_type -> wrpc.ResponseVO
	13, // 85: wrpc.WecomRPC.GetCustomerGroupList:output_type -> wrpc.ResponseVO
	13, // 86: wrpc.WecomRPC.GetCustomerGroupChat:output_type -> wrpc.ResponseVO
	13, // 87: wrpc.WecomRPC.GetCustomerGroupChatByChatID:output_type -> wrpc.ResponseVO
	13, // 88: wrpc.WecomRPC.FlushCustomer:output_type -> wrpc.ResponseVO
	13, // 89: wrpc.WecomRPC.SyncCustomerGroup:output_type -> wrpc.ResponseVO
	13, // 90: wrpc.WecomRPC.FlushCustomerGroup:output_type -> wrpc.ResponseVO
	13, // 91: wrpc.WecomRPC.QueryCustomerGroupByCond:output_type -> wrpc.ResponseVO
	13, // 92: wrpc.WecomRPC.SendTextMsg:output_type -> wrpc.ResponseVO
	13, // 93: wrpc.WecomRPC.SendWarnMsg:output_type -> wrpc.ResponseVO
	13, // 94: wrpc.WecomRPC.FindAccountUserList:output_type -> wrpc.ResponseVO
	13, // 95: wrpc.WecomRPC.SyncAccountUser:output_type -> wrpc.ResponseVO
	13, // 96: wrpc.WecomRPC.FlushAccountUser:output_type -> wrpc.ResponseVO
	13, // 97: wrpc.WecomRPC.GetAccountUserList:output_type -> wrpc.ResponseVO
	13, // 98: wrpc.WecomRPC.GetAccountUserListByOpenIDList:output_type -> wrpc.ResponseVO
	13, // 99: wrpc.WecomRPC.ModifyAccountUserRemark:output_type -> wrpc.ResponseVO
	13, // 100: wrpc.WecomRPC.GetAccountTagList:output_type -> wrpc.ResponseVO
	13, // 101: wrpc.WecomRPC.GetOauthCallBackURL:output_type -> wrpc.ResponseVO
	13, // 102: wrpc.WecomRPC.SyncContactWayList:output_type -> wrpc.ResponseVO
	13, // 103: wrpc.WecomRPC.FlushContactWay:output_type -> wrpc.ResponseVO
	13, // 104: wrpc.WecomRPC.SendAccountTrackMsg:output_type -> wrpc.ResponseVO
	13, // 105: wrpc.WecomRPC.SendAccountProcMsg:output_type -> wrpc.ResponseVO
	13, // 106: wrpc.WecomRPC.QueryFieldList:output_type -> wrpc.ResponseVO
	13, // 107: wrpc.WecomRPC.FindSupplierList:output_type -> wrpc.ResponseVO
	13, // 108: wrpc.WecomRPC.SyncSupplier:output_type -> wrpc.ResponseVO
	13, // 109: wrpc.WecomRPC.FindBusinessCustomerList:output_type -> wrpc.ResponseVO
	13, // 110: wrpc.WecomRPC.SyncBusinessCustomer:output_type -> wrpc.ResponseVO
	13, // 111: wrpc.WecomRPC.UpdateBusinessCustomer:output_type -> wrpc.ResponseVO
	13, // 112: wrpc.WecomRPC.FindEnumList:output_type -> wrpc.ResponseVO
	13, // 113: wrpc.WecomRPC.QueryNameByType:output_type -> wrpc.ResponseVO
	13, // 114: wrpc.WecomRPC.GetBusinessCustomer:output_type -> wrpc.ResponseVO
	13, // 115: wrpc.WecomRPC.GetNeedNotifyCustomerList:output_type -> wrpc.ResponseVO
	13, // 116: wrpc.WecomRPC.FindClaimedCustomer:output_type -> wrpc.ResponseVO
	13, // 117: wrpc.WecomRPC.SaveCustomerPointRecord:output_type -> wrpc.ResponseVO
	13, // 118: wrpc.WecomRPC.GetCustomerPointRecord:output_type -> wrpc.ResponseVO
	13, // 119: wrpc.WecomRPC.ListCustomerPointRecord:output_type -> wrpc.ResponseVO
	13, // 120: wrpc.WecomRPC.ListUserByCond:output_type -> wrpc.ResponseVO
	13, // 121: wrpc.WecomRPC.JudgeTodayIsWorkday:output_type -> wrpc.ResponseVO
	13, // 122: wrpc.WecomRPC.QueryIndicatorCount:output_type -> wrpc.ResponseVO
	13, // 123: wrpc.WecomRPC.QueryIndicatorDetail:output_type -> wrpc.ResponseVO
	13, // 124: wrpc.WecomRPC.QueryHalfDayLeaveMap:output_type -> wrpc.ResponseVO
	13, // 125: wrpc.WecomRPC.QueryCheckInMonth:output_type -> wrpc.ResponseVO
	13, // 126: wrpc.WecomRPC.CalculateUserIndicator:output_type -> wrpc.ResponseVO
	13, // 127: wrpc.WecomRPC.GenerateReportRecord:output_type -> wrpc.ResponseVO
	13, // 128: wrpc.WecomRPC.SyncAcademy:output_type -> wrpc.ResponseVO
	13, // 129: wrpc.WecomRPC.SyncTraining:output_type -> wrpc.ResponseVO
	13, // 130: wrpc.WecomRPC.QueryIndicatorCountInBatch:output_type -> wrpc.ResponseVO
	70, // [70:131] is the sub-list for method output_type
	9,  // [9:70] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_wecom_wecom_rpc_proto_init() }
func file_proto_wecom_wecom_rpc_proto_init() {
	if File_proto_wecom_wecom_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_wecom_wecom_rpc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MessageAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*OpenIDListAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ModifyRemarkAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*OptionAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UserDetailAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetCustomerGroupAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FindAccountAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FindCustomerAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FindCustomerGroupAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AddCustomerAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCustomerAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetCustomerInRobotChatAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RequestAO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_wecom_wecom_rpc_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_wecom_wecom_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_wecom_wecom_rpc_proto_goTypes,
		DependencyIndexes: file_proto_wecom_wecom_rpc_proto_depIdxs,
		MessageInfos:      file_proto_wecom_wecom_rpc_proto_msgTypes,
	}.Build()
	File_proto_wecom_wecom_rpc_proto = out.File
	file_proto_wecom_wecom_rpc_proto_rawDesc = nil
	file_proto_wecom_wecom_rpc_proto_goTypes = nil
	file_proto_wecom_wecom_rpc_proto_depIdxs = nil
}
